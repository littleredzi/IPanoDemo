<krpano>
	<!-- krpano 1.18.3 - Default Virtual Tour Skin -->

	<!-- Global Skin settings (can be overridden in the 'outer' xml) -->
	<skin_settings thumbs="true" />


	<!-- Skin Styles -->

	<!-- skin_base - the base skin image -->

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-size:20px;" textshadow="1" />

	<!-- skin_hotspotstyle - style for the hotspots (note - the onclick event will be overwritten here and can't be set directly at the hotspot! the hotspots need to have a 'linkedscene' attribute to be clickable) -->

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover="copy(layer[skin_tooltip].html, tooltip);
	               set(layer[skin_tooltip].visible, true);
	               tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	               asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="%SWFPATH%/images/vtourskin.png" />

	<!-- skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); "
	       onout="if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));"
	       onup="if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
	       />

	<!-- the tooltip textfield -->
	<!-- 导航单元的样式 -->
	<layer name="skin_tooltip" keep="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false"
	       align="lefttop" edge="bottom" oy="-2" width="200" autoheight="true"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="0.5" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;"
	       html=""
	       />

	<!-- Skin Layout -->
	<layer name="skin_scroll_window" type="container" keep="true" align="leftbottom" width="100%" height="100%" x="0" y="60" y_opened="60" y_closed="-2" maskchildren="true">
		<layer name="skin_scroll_layer" type="container" align="leftbottom" width="100%" height="100%" x="0" y="-100%">
			<layer name="skin_scroll_container" type="container" bgcolor="0x000000" bgalpha="0.5" align="lefttop" width="100%" height="100%" x="0" y="0" maskchildren="true">
				<layer name="skin_thumbs_container" type="container" align="lefttop" width="100%" height="500%" visible="false">
					<layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
					<layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
					<layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="4" visible="false" enabled="false" />
					<layer name="skin_thumbs" state="closed" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
				</layer>
			</layer>
		</layer>
	</layer>


	<layer name="skin_control_bar" keep="true" type="container" bgcolor="0x000000" bgalpha="0" align="centerbottom" width="100%" height="80" x="0" y="0" y_opened="20" y_closed="-42" zorder="3">
		<layer name="skin_btn_thumbs" style="skin_base|skin_glow" crop="0|128|64|64"  align="leftbottom"  x="10"   y="-20"   scale="1" ondown2="skin_showmap(false); skin_showthumbs();" />
		<layer name="skin_btn_title" url="%SWFPATH%/plugins/textfield.swf" align="lefttop" edge="leftbottom" width="95%" height="32" autoheight="true" x="80" y="35" zorder="4" enabled="false" background="false" border="false" css="text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:20px;" textshadow="1" html="选择场景" />
	</layer>


	<layer name="skin_loadingtext"  keep="true" url="%SWFPATH%/plugins/textfield.swf" align="center" x="5" y="-5" html="loading..." visible="false" autoheight="true" background="false" border="false" enabled="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:22px; font-style:italic;" textshadow="2" />
    <layer name="skin_thumbborder"  keep="true" url="%SWFPATH%/images/vtourskin_thumbborder.png" visible="false" enabled="false" align="lefttop" scale="0.5" ox="-2" oy="-2" />
	<layer name="skin_buttonglow"   keep="true" style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" alpha="0.0" visible="false" enabled="false" />

	<!-- Skin Events -->
	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_showloading(true); skin_update_scene_infos();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onresize="skin_onresize();"
	        />

	<!-- Alternative small screen layout for mobile devices (override/extend settings) -->

	<krpano devices="mobile">
		<layer name="skin_scroll_window" y="100" y_opened="64" y_closed="-4">
			<layer name="skin_scroll_layer">
				<layer name="skin_topborder" height="24" />
				<layer name="skin_title" css="text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:26px;" />
				<layer name="skin_scroll_container">
					<layer name="skin_thumbs_container">
						<layer name="skin_thumbs_scrollleft"  scale="1" />
						<layer name="skin_thumbs_scrollright" scale="1" />
						<layer name="skin_thumbs_scrollindicator" height="6" />
						<layer name="skin_thumbs" height="200" />
					</layer>
					<layer name="skin_map">
						<maptypecontrol scale="1.5" />
					</layer>
				</layer>
			</layer>
		</layer>


		<layer name="skin_control_bar" height="64" y="0" y_opened="0" y_closed="-68">
			<layer name="skin_btn_thumbs" scale="1.2" y="-18" align="left" x="10" />
			<layer name="skin_btn_fs"     scale="1" y="0" align="left" x="320" />
		</layer>
		<layer name="skin_buttonglow"  scale="2.0" />
		<layer name="skin_thumbborder" scale="1" />

		<style name="skin_thumbtext_style" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:30px;" />
	</krpano>


	<!-- Skin Actions -->


	<action name="skin_startup">
		if(device.mobile == false,
			copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
			copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
			add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
			add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

			if(skin_settings.thumbs,
				if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
			
				copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

				if(skin_settings.thumbs_onhoverscrolling,
					if(device.mouse, set(layer[skin_thumbs].draggable, false));
					set(layer[skin_thumbs].onhover_autoscrolling, true);
				  );
			  );
		  );

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();
        

		copy(usegyro, skin_settings.gyro);
		if(device.desktop, set(usegyro, false));
		if(device.flash, set(usegyro, false));
		if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

		if(skin_settings.maps == true,
			set(layer[skin_btn_map].visible, true);
			copy(layer[skin_map_zoom_in].visible,  skin_settings.maps_zoombuttons);
			copy(layer[skin_map_zoom_out].visible, skin_settings.maps_zoombuttons);
			
			if(device.flash,
				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
				set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
			  ,
				if(skin_settings.maps_type == 'bing', 
					copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
					set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js'); 
				  ,
					set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js'); 
				  );
			  );
		  ,
			if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		  );
	</action>

	<action name="skin_addthumbs">
		if(skin_settings.thumbs == false, 
			set(layer[skin_btn_thumbs].visible,false);
		  ,
			copy(thumbwidth, skin_settings.thumbs_width);
			copy(thumbheight, skin_settings.thumbs_height);
			copy(thumbpadding, skin_settings.thumbs_padding);
			copy(thumbcrop, skin_settings.thumbs_crop);
	
			if(device.mobile,
				mul(thumbwidth,2);
				mul(thumbheight,2);
				mul(thumbpadding,2);
			  );
	
			add(thumbxoffset, thumbwidth, thumbpadding);
			mul(thumbxcenter, thumbxoffset, 0.5);
			mul(thumbbarwidth, thumbxoffset, skin_settings.scene_count);
			add(thumbbarwidth, thumbpadding);
			add(thumbbarheight, thumbpadding, thumbheight);
			add(thumbbarheight, thumbpadding);
	
			if(skin_settings.thumbs_scrollindicator,
				copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
				add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
			);
	
			copy(layer[skin_thumbs].height, thumbbarheight);
			copy(layer[skin_thumbs].width, thumbbarwidth);
	
			mul(halfheight, thumbbarheight, 0.5);
			copy(layer[skin_thumbs_scrollleft].y, halfheight);
			copy(layer[skin_thumbs_scrollright].y, halfheight);
	
			for(set(i,0), i LT skin_settings.scene_count, inc(i),
				txtadd(thumbname,'skin_thumb_',get(i));
				addlayer(get(thumbname));
				copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
				set(layer[get(thumbname)].keep, true);
				set(layer[get(thumbname)].parent, 'skin_thumbs');
				set(layer[get(thumbname)].align, lefttop);
				copy(layer[get(thumbname)].crop, thumbcrop);
				copy(layer[get(thumbname)].width, thumbwidth);
				copy(layer[get(thumbname)].height, thumbheight);
				mul(thumbx, i, thumbxoffset);
				add(thumbx, thumbpadding);
				copy(layer[get(thumbname)].x, thumbx);
				copy(layer[get(thumbname)].y, thumbpadding);
				add(scene[get(i)].thumbx, thumbx, thumbxcenter);
				copy(scene[get(i)].thumby, thumbpadding);
				set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
				set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );
				if(skin_settings.tooltips_thumbs,
					set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
					layer[get(thumbname)].loadstyle(skin_tooltips);
				  );
				if(skin_settings.thumbs_text,
					txtadd(thumbtext, 'skin_thumbtext_', get(i));
					addlayer(get(thumbtext));
					layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
					set(layer[get(thumbtext)].keep, true);
					set(layer[get(thumbtext)].parent, get(thumbname));
					set(layer[get(thumbtext)].html, get(scene[get(i)].title));
				);
		    );
	    );
	</action>

	<action name="skin_onresize">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		if(layer[skin_map].state == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
		set(layer[skin_scroll_layer].y, get(mh));
		ifnot(device.mobile, if(area.pixelwidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); );
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);
		if(device.mobile, mul(padding,2));

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				if(skin_settings.title,
					if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
					delayedcall(0.1, set(layer[skin_title].visible,true) );
				  );

				if(skin_settings.thumbs_loop == false,
					if(scene[get(xml.scene)].index GT 0,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
					  );

					sub(lastsceneindex, skin_settings.scene_count, 1);
					if(scene[get(xml.scene)].index LT lastsceneindex,
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  ,
					if(skin_settings.scene_count GT 1,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  );

				txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
				if(layer[get(parentname)],
					set(layer[skin_thumbborder].parent, get(parentname));
					set(layer[skin_thumbborder].visible, true);
				  ,
					set(layer[skin_thumbborder].visible, false);
				  );

				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
				
				if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, 
					set(layer[skin_btn_gyro].visible, true);
				  , 
					set(layer[skin_btn_gyro].visible, false) 
				);
			  );
		  );
	</action>

	<action name="skin_showloading">
		set(layer[skin_loadingtext].visible, %1);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			add(mh, layer[skin_thumbs].height);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>

	<action name="skin_view_change_with_hotspot">
		tween(view.vlookat,        0, distance(100,0.8));
		add(new_hlookat, view.hlookat, 0);
		tween(view.hlookat, get(new_hlookat), distance(100,0.8));
	</action>
</krpano>
